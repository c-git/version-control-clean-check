use std::{error::Error, fmt::Display};

/// Enumerates the possible error values that can be generated by this crate
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
#[non_exhaustive]
pub enum VSCError {
    /// Unable to detect a version control system
    NoVCS,
    /// Found a type of file that was not allowed. Includes listing of disallowed files found
    NotAllowedFilesFound {
        /// Dirty files found (note this will be empty if dirty files are allowed)
        dirty_files: Vec<String>,
        /// Staged files found (note this will be empty if staged files are allowed)
        staged_files: Vec<String>,
    },
}

impl Display for VSCError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            VSCError::NoVCS => write!(f, "no VCS found but this not allowed"),
            VSCError::NotAllowedFilesFound {
                dirty_files,
                staged_files,
            } => {
                let mut files_list = String::new();
                for file in dirty_files {
                    files_list.push_str("  * ");
                    files_list.push_str(file);
                    files_list.push_str(" (dirty)\n");
                }
                for file in staged_files {
                    files_list.push_str("  * ");
                    files_list.push_str(file);
                    files_list.push_str(" (staged)\n");
                }

                write!(
                    f,
                    "disallowed files found:\n\
                     \n\
                     {}\n\
                     ",
                    files_list
                )
            }
        }
    }
}

impl Error for VSCError {}
